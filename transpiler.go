package main

import (
	"bufio"
	"fmt"
	"strings"
	"time"
)

type Transpiler struct {
	source string
	output strings.Builder
}

func NewTranspiler(source string) *Transpiler {
	return &Transpiler{
		source: source,
	}
}

func (t *Transpiler) generateHeader() {
	t.output.WriteString("// Generated by Blaze Transpiler\n")
	t.output.WriteString(fmt.Sprintf("// Current Date and Time (UTC): %s\n", time.Now().UTC().Format("2006-01-02 15:04:05")))
	t.output.WriteString("package main\n\n")
}
func (t *Transpiler) processLine(line string) string {
	line = strings.TrimSpace(strings.TrimSuffix(line, "!"))
	line = strings.ReplaceAll(line, "::", ".")

	// Handle imports
	if strings.HasPrefix(line, "import ") {
		importPath := strings.TrimPrefix(line, "import ")
		return fmt.Sprintf("\t\"%s\"", importPath)
	}
	//No jank
	if idx := strings.Index(line, ":="); idx >= 0 {
		beforeAssignment := strings.TrimSpace(line[:idx])
		afterAssignment := strings.TrimSpace(line[idx+2:])

		// Check if it's a function call (contains parentheses)
		if strings.Contains(afterAssignment, "(") && strings.Contains(afterAssignment, ")") {
			vars := strings.Split(beforeAssignment, ",")
			if len(vars) == 1 { // Single return value
				// Add err variable because go is goofy
				return strings.Replace(line, ":=", ", err :=", 1)
			}
		}
	}

	return line
}

func (t *Transpiler) Transpile() string {
	t.output.WriteString("// Generated by Blaze Transpiler\n")
	t.output.WriteString(fmt.Sprintf("// Current Date and Time (UTC): %s\n", time.Now().UTC().Format("2006-01-02 15:04:05")))
	t.output.WriteString("package main\n\n")

	// Create a buffer for imports
	var imports strings.Builder
	imports.WriteString("import (\n")

	// First pass - collect imports
	scanner := bufio.NewScanner(strings.NewReader(t.source))
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if strings.HasPrefix(line, "import ") {
			processed := t.processLine(line)
			imports.WriteString(processed + "\n")
		}
	}
	imports.WriteString(")\n\n")

	// Write imports section if any imports were found
	t.output.WriteString(imports.String())

	// Second pass - process the rest of the code
	t.output.WriteString("func main() {\n")
	scanner = bufio.NewScanner(strings.NewReader(t.source))
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		if line == "" {
			continue // Skip empty lines
		}

		if strings.HasPrefix(line, "import ") {
			continue // Skip import lines in the main processing
		}

		if line == "try [" {
			t.output.WriteString("\tvar err error\n")
			continue
		}

		if line == "] catch err [" {
			t.output.WriteString("\tif err != nil {\n")
			continue
		}

		if line == "]" {
			t.output.WriteString("\t}\n")
			continue
		}

		processedLine := t.processLine(line)
		if processedLine != "" {
			t.output.WriteString("\t" + processedLine + "\n")
		}
	}

	t.output.WriteString("}\n")
	return t.output.String()
}
