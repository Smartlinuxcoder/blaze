package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"
)

type Transpiler struct {
	source string
	output strings.Builder
}

func NewTranspiler(source string) *Transpiler {
	return &Transpiler{
		source: source,
	}
}

func (t *Transpiler) generateHeader() {
	t.output.WriteString("// Generated by Blaze Transpiler\n")
	t.output.WriteString(fmt.Sprintf("// Current Date and Time (UTC): %s\n", time.Now().UTC().Format("2006-01-02 15:04:05")))
	t.output.WriteString("package main\n\n")
	t.output.WriteString("import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\n")
}

func (t *Transpiler) processLine(line string) string {
	line = strings.TrimSpace(strings.TrimSuffix(line, "!"))
	line = strings.ReplaceAll(line, "::", ".")

	// JANK
	if strings.HasPrefix(line, "import ") {
		return ""
	}

	// 1 word = JANK
	if strings.Contains(line, "http.Get(") {
		return strings.Replace(line, ":= http.Get", ", err := http.Get", 1)
	}
	if strings.Contains(line, "io.ReadAll(") {
		return strings.Replace(line, ":= io.ReadAll", ", err := io.ReadAll", 1)
	}

	return line
}

func (t *Transpiler) Transpile() string {
	t.generateHeader()

	scanner := bufio.NewScanner(strings.NewReader(t.source))
	t.output.WriteString("func main() {\n")

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" {
			continue // Skip empty lines
		}
		if line == "try [" {
			t.output.WriteString("\tvar err error\n")
			continue
		}
		if line == "] catch err [" {
			t.output.WriteString("\tif err != nil {\n")
			continue
		}
		if line == "]" {
			t.output.WriteString("\t}\n")
			continue
		}

		processedLine := t.processLine(line)
		if processedLine != "" { // Gotta write non-empty lines
			t.output.WriteString("\t" + processedLine + "\n")
		}
	}
	t.output.WriteString("}\n")
	return t.output.String()
}

func main() {
	sourceCode := `
import net/http!
url := "http://letsgosky.social"!
try [
    response := http::Get(url)!
    body := io::ReadAll(response.Body)!
    fmt::Print("Response Status: " + response.Status)!
    fmt::Print("Response Body: " + string(body))!
] catch err [
    fmt::Print("Error: " + err.Error())!
]
`
	transpiler := NewTranspiler(sourceCode)
	result := transpiler.Transpile()
	fmt.Println("Transpiled Go code:")
	fmt.Println(result)

	err := os.WriteFile("transpiled.go", []byte(result), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
	}
}
